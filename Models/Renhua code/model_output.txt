version as of 12:46AM 12/11/2024



import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
from torchvision.transforms import functional as F
import torchvision.datasets as datasets
from torch.utils.data import DataLoader
from sklearn.model_selection import train_test_split

# Load dataset
input_folder = r'D:\Term 3 2024\COMP9444\COMP9444_project\Dataset\Yoga-82\yoga_dataset_links_skeleton'

# Data transformations (resize, normalize, and augment)
transform = transforms.Compose([
    transforms.Resize((75, 75)),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

# Load the full dataset from the directory
dataset = datasets.ImageFolder(root=input_folder, transform=transform)


# Set the train-test split ratio
train_ratio = 0.8
train_size = int(train_ratio * len(dataset))
test_size = len(dataset) - train_size

# Split the dataset into training and testing sets
train_dataset, test_dataset = torch.utils.data.random_split(dataset, [train_size, test_size])

# DataLoader for training and testing sets
batch_size = 64
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=batch_size)



# Define the YogaConvo2d model based on the paper
class YogaConvo2d(nn.Module):
    def __init__(self, num_classes):
        super(YogaConvo2d, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout1 = nn.Dropout(0.25)
        
        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.conv3 = nn.Conv2d(128, 256, kernel_size=3, padding=1)
        self.dropout2 = nn.Dropout(0.25)
        
        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(256 * 9 * 9, 1024)
        self.fc2 = nn.Linear(1024, num_classes)
        self.dropout3 = nn.Dropout(0.5)

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = self.pool(x)
        x = self.dropout1(x)
        
        x = torch.relu(self.conv2(x))
        x = self.pool(x)
        x = self.dropout2(x)

        x = torch.relu(self.conv3(x))
        x = self.pool(x)
        x = self.dropout2(x)

        x = self.flatten(x)
        x = torch.relu(self.fc1(x))
        x = self.dropout3(x)
        x = self.fc2(x)
        #return torch.softmax(x, dim=1)
        return x


# Define data transformations
transform = transforms.Compose([
    transforms.Resize((75, 75)),
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

# Initialize model, loss function, and optimizer
num_classes = len(dataset.classes)
model = YogaConvo2d(num_classes=num_classes)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training and Testing Loops (similar to previous implementation)
if torch.cuda.is_available():
    device = torch.device("cuda")
    print("CUDA is available. Using GPU:", torch.cuda.get_device_name(0))
else:
    device = torch.device("cpu")
    print("CUDA is not available. Using CPU.")

model.to(device)

# Training function
def train(model, train_loader, optimizer, criterion):
    model.train()
    total, correct = 0, 0
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)  # Move to device
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        
        _, preds = torch.max(outputs, 1)
        correct += (preds == labels).sum().item()
        total += labels.size(0)
    
    accuracy = 100 * correct / total
    print(f"Training Accuracy: {accuracy:.6f}%")
    return accuracy

# Testing function
def test(model, test_loader, criterion):
    model.eval()
    total, correct = 0, 0
    with torch.no_grad():
        for images, labels in test_loader:
            images, labels = images.to(device), labels.to(device)  # Move to device
            outputs = model(images)
            _, preds = torch.max(outputs, 1)
            correct += (preds == labels).sum().item()
            total += labels.size(0)
    
    accuracy = 100 * correct / total
    print(f"Test Accuracy: {accuracy:.6f}%")
    return accuracy

print(model)

# Training loop
epochs = 50
for epoch in range(epochs):
    print(f"Epoch {epoch + 1}/{epochs}")
    train_accuracy = train(model, train_loader, optimizer, criterion)
    if (epoch + 1) % 10 == 0:
        test_accuracy = test(model, test_loader, criterion)












Epoch 1/50
Training Accuracy: 5.741080%
Epoch 2/50
Training Accuracy: 21.317475%
Epoch 3/50
Training Accuracy: 32.616651%
Epoch 4/50
Training Accuracy: 38.860933%
Epoch 5/50
Training Accuracy: 45.913388%
Epoch 6/50
Training Accuracy: 49.618786%
Epoch 7/50
Training Accuracy: 53.247941%
Epoch 8/50
Training Accuracy: 56.038426%
Epoch 9/50
Training Accuracy: 59.118634%
Epoch 10/50
Training Accuracy: 59.827691%
Test Accuracy: 61.817627%
Epoch 11/50
Training Accuracy: 62.991766%
Epoch 12/50
Training Accuracy: 65.294297%
Epoch 13/50
Training Accuracy: 66.552303%
Epoch 14/50
Training Accuracy: 68.328759%
Epoch 15/50
Training Accuracy: 70.082342%
Epoch 16/50
Training Accuracy: 71.386093%
Epoch 17/50
Training Accuracy: 73.269289%
Epoch 18/50
Training Accuracy: 74.298567%
Epoch 19/50
Training Accuracy: 75.472705%
Epoch 20/50
Training Accuracy: 77.096676%
Test Accuracy: 64.928332%
Epoch 21/50
Training Accuracy: 77.340653%
Epoch 22/50
Training Accuracy: 78.064959%
Epoch 23/50
Training Accuracy: 78.270814%
Epoch 24/50
Training Accuracy: 80.443733%
Epoch 25/50
Training Accuracy: 80.154010%
Epoch 26/50
Training Accuracy: 81.053675%
Epoch 27/50
Training Accuracy: 81.747484%
Epoch 28/50
Training Accuracy: 82.487039%
Epoch 29/50
Training Accuracy: 83.203721%
Epoch 30/50
Training Accuracy: 83.592559%
Test Accuracy: 66.331199%
Epoch 31/50
Training Accuracy: 84.240622%
Epoch 32/50
Training Accuracy: 85.292772%
Epoch 33/50
Training Accuracy: 84.720952%
Epoch 34/50
Training Accuracy: 85.033547%
Epoch 35/50
Training Accuracy: 85.727356%
Epoch 36/50
Training Accuracy: 86.078073%
Epoch 37/50
Training Accuracy: 86.817627%
Epoch 38/50
Training Accuracy: 86.832876%
Epoch 39/50
Training Accuracy: 87.076853%
Epoch 40/50
Training Accuracy: 87.519061%
Test Accuracy: 65.324794%
Epoch 41/50
Training Accuracy: 87.740165%
Epoch 42/50
Training Accuracy: 87.458066%
Epoch 43/50
Training Accuracy: 88.296737%
Epoch 44/50
Training Accuracy: 88.883806%
Epoch 45/50
Training Accuracy: 88.716072%
Epoch 46/50
Training Accuracy: 89.082037%
Epoch 47/50
Training Accuracy: 89.242147%
Epoch 48/50
Training Accuracy: 89.394633%
Epoch 49/50
Training Accuracy: 89.569991%
Epoch 50/50
Training Accuracy: 89.531869%
Test Accuracy: 66.697164%
PS D:\Term 3 2024\COMP9444\COMP9444_project\Dataset\Yoga-82\Renhua code> 